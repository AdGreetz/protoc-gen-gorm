// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example/feature_demo/test.proto

package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestTypesStatus int32

const (
	TestTypes_UNKNOWN TestTypesStatus = 0
	TestTypes_GOOD    TestTypesStatus = 1
	TestTypes_BAD     TestTypesStatus = 2
)

var TestTypesStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "GOOD",
	2: "BAD",
}
var TestTypesStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"GOOD":    1,
	"BAD":     2,
}

func (x TestTypesStatus) String() string {
	return proto.EnumName(TestTypesStatus_name, int32(x))
}
func (TestTypesStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

// test_id_and_stuff is a message that serves as an example
type TestTypes struct {
	ApiOnlyString  string                        `protobuf:"bytes,1,opt,name=api_only_string,json=apiOnlyString" json:"api_only_string,omitempty"`
	Numbers        []int32                       `protobuf:"varint,2,rep,packed,name=numbers" json:"numbers,omitempty"`
	OptionalString *google_protobuf1.StringValue `protobuf:"bytes,3,opt,name=optional_string,json=optionalString" json:"optional_string,omitempty"`
	BecomesInt     TestTypesStatus               `protobuf:"varint,4,opt,name=becomes_int,json=becomesInt,enum=example.TestTypesStatus" json:"becomes_int,omitempty"`
	Nothingness    *google_protobuf2.Empty       `protobuf:"bytes,5,opt,name=nothingness" json:"nothingness,omitempty"`
}

func (m *TestTypes) Reset()                    { *m = TestTypes{} }
func (m *TestTypes) String() string            { return proto.CompactTextString(m) }
func (*TestTypes) ProtoMessage()               {}
func (*TestTypes) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *TestTypes) GetApiOnlyString() string {
	if m != nil {
		return m.ApiOnlyString
	}
	return ""
}

func (m *TestTypes) GetNumbers() []int32 {
	if m != nil {
		return m.Numbers
	}
	return nil
}

func (m *TestTypes) GetOptionalString() *google_protobuf1.StringValue {
	if m != nil {
		return m.OptionalString
	}
	return nil
}

func (m *TestTypes) GetBecomesInt() TestTypesStatus {
	if m != nil {
		return m.BecomesInt
	}
	return TestTypes_UNKNOWN
}

func (m *TestTypes) GetNothingness() *google_protobuf2.Empty {
	if m != nil {
		return m.Nothingness
	}
	return nil
}

type TypeWithId struct {
	Ip            string       `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Things        []*TestTypes `protobuf:"bytes,3,rep,name=things" json:"things,omitempty"`
	ANestedObject *TestTypes   `protobuf:"bytes,4,opt,name=a_nested_object,json=aNestedObject" json:"a_nested_object,omitempty"`
}

func (m *TypeWithId) Reset()                    { *m = TypeWithId{} }
func (m *TypeWithId) String() string            { return proto.CompactTextString(m) }
func (*TypeWithId) ProtoMessage()               {}
func (*TypeWithId) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *TypeWithId) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *TypeWithId) GetThings() []*TestTypes {
	if m != nil {
		return m.Things
	}
	return nil
}

func (m *TypeWithId) GetANestedObject() *TestTypes {
	if m != nil {
		return m.ANestedObject
	}
	return nil
}

type ApiOnlyType struct {
	Contents string `protobuf:"bytes,1,opt,name=contents" json:"contents,omitempty"`
}

func (m *ApiOnlyType) Reset()                    { *m = ApiOnlyType{} }
func (m *ApiOnlyType) String() string            { return proto.CompactTextString(m) }
func (*ApiOnlyType) ProtoMessage()               {}
func (*ApiOnlyType) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ApiOnlyType) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

type TypeBecomesEmpty struct {
	AThing *ApiOnlyType `protobuf:"bytes,1,opt,name=a_thing,json=aThing" json:"a_thing,omitempty"`
}

func (m *TypeBecomesEmpty) Reset()                    { *m = TypeBecomesEmpty{} }
func (m *TypeBecomesEmpty) String() string            { return proto.CompactTextString(m) }
func (*TypeBecomesEmpty) ProtoMessage()               {}
func (*TypeBecomesEmpty) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *TypeBecomesEmpty) GetAThing() *ApiOnlyType {
	if m != nil {
		return m.AThing
	}
	return nil
}

func init() {
	proto.RegisterType((*TestTypes)(nil), "example.test_types")
	proto.RegisterType((*TypeWithId)(nil), "example.type_with_id")
	proto.RegisterType((*ApiOnlyType)(nil), "example.api_only_type")
	proto.RegisterType((*TypeBecomesEmpty)(nil), "example.type_becomes_empty")
	proto.RegisterEnum("example.TestTypesStatus", TestTypesStatus_name, TestTypesStatus_value)
}

func init() { proto.RegisterFile("example/feature_demo/test.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x5d, 0x6f, 0xd3, 0x3c,
	0x14, 0xc7, 0x9f, 0xa4, 0x5b, 0xdb, 0xc7, 0x61, 0x6b, 0xe5, 0x21, 0x94, 0x06, 0x04, 0x25, 0x02,
	0x29, 0x68, 0x5a, 0x22, 0x75, 0x37, 0xd0, 0x5d, 0x31, 0x6d, 0x20, 0x84, 0x68, 0xa5, 0xf0, 0x26,
	0x71, 0x63, 0x39, 0x8d, 0x97, 0x1a, 0x12, 0xdb, 0xb2, 0x1d, 0x6d, 0xf9, 0x68, 0xed, 0x37, 0xe0,
	0x9a, 0x2f, 0x84, 0xe2, 0x24, 0xe3, 0x6d, 0x48, 0x5c, 0x26, 0xe7, 0x7f, 0xfe, 0xe7, 0x77, 0x5e,
	0x0c, 0x1e, 0x90, 0x2b, 0x5c, 0x88, 0x9c, 0x44, 0x17, 0x04, 0xeb, 0x52, 0x12, 0x94, 0x92, 0x82,
	0x47, 0x9a, 0x28, 0x1d, 0x0a, 0xc9, 0x35, 0x87, 0x83, 0x56, 0xe0, 0x3d, 0xcb, 0xa8, 0x5e, 0x97,
	0x49, 0xb8, 0xe2, 0x45, 0x44, 0xd9, 0x05, 0x4f, 0x72, 0x7e, 0xc5, 0x05, 0x61, 0x91, 0xd1, 0xad,
	0x8e, 0x32, 0xc2, 0x8e, 0x32, 0x2e, 0x8b, 0x88, 0x0b, 0x4d, 0x39, 0x53, 0x11, 0x97, 0x45, 0xe3,
	0xe1, 0xdd, 0xcf, 0x38, 0xcf, 0x72, 0xd2, 0x28, 0x93, 0xf2, 0x22, 0xba, 0x94, 0x58, 0x08, 0x22,
	0x55, 0x1b, 0xbf, 0xfb, 0x7b, 0x9c, 0x14, 0x42, 0x57, 0x4d, 0xd0, 0xff, 0x66, 0x03, 0x50, 0xf3,
	0x20, 0x5d, 0x09, 0xa2, 0x60, 0x08, 0x46, 0x58, 0x50, 0xc4, 0x59, 0x5e, 0x21, 0xa5, 0x25, 0x65,
	0x99, 0x6b, 0x4d, 0xad, 0xe0, 0xff, 0xd3, 0xfe, 0x76, 0x33, 0xb1, 0xc7, 0x56, 0xbc, 0x87, 0x05,
	0x5d, 0xb2, 0xbc, 0x7a, 0x6b, 0x82, 0xd0, 0x05, 0x03, 0x56, 0x16, 0x09, 0x91, 0xca, 0xb5, 0xa7,
	0xbd, 0x60, 0x37, 0xee, 0x3e, 0xe1, 0x39, 0x18, 0x35, 0xa8, 0x38, 0xef, 0x9c, 0x7a, 0x53, 0x2b,
	0x70, 0x66, 0xf7, 0xc2, 0x86, 0x27, 0xec, 0x78, 0xc2, 0xc6, 0xeb, 0x03, 0xce, 0x4b, 0x12, 0xef,
	0x77, 0x49, 0x6d, 0x81, 0x13, 0xe0, 0x24, 0x64, 0xc5, 0x0b, 0xa2, 0x10, 0x65, 0xda, 0xdd, 0x99,
	0x5a, 0xc1, 0xfe, 0xcc, 0x0b, 0xdb, 0xb1, 0x85, 0x3f, 0xd0, 0x43, 0xa5, 0xb1, 0x2e, 0x55, 0x0c,
	0x5a, 0xf9, 0x2b, 0xa6, 0xe1, 0x53, 0xe0, 0x30, 0xae, 0xd7, 0x94, 0x65, 0x8c, 0x28, 0xe5, 0xee,
	0x9a, 0xfa, 0x77, 0xfe, 0xa8, 0x7f, 0x5e, 0xcf, 0x23, 0xfe, 0x59, 0xea, 0x07, 0xa0, 0xdf, 0xf8,
	0x41, 0x07, 0x0c, 0xde, 0x2f, 0x5e, 0x2f, 0x96, 0x1f, 0x17, 0xe3, 0xff, 0xe0, 0x10, 0xec, 0xbc,
	0x5c, 0x2e, 0xcf, 0xc6, 0x16, 0x1c, 0x80, 0xde, 0xe9, 0xf3, 0xb3, 0xb1, 0x3d, 0x3f, 0xd8, 0x6e,
	0x26, 0xa3, 0xa1, 0xe5, 0x39, 0xaa, 0xe0, 0x32, 0xc3, 0x2a, 0xe1, 0x32, 0xf5, 0xbf, 0x5a, 0xe0,
	0x56, 0x4d, 0x85, 0x2e, 0xa9, 0x5e, 0x23, 0x9a, 0xc2, 0x47, 0xc0, 0xa6, 0xa2, 0x1d, 0xe5, 0xed,
	0xed, 0x66, 0x32, 0x06, 0xfb, 0xf5, 0x36, 0xe7, 0x3e, 0x15, 0x08, 0xa7, 0xa9, 0xf4, 0x63, 0x9b,
	0x0a, 0x78, 0x08, 0xfa, 0x06, 0x41, 0xb9, 0xbd, 0x69, 0x2f, 0x70, 0x66, 0x07, 0x37, 0xf4, 0x19,
	0xb7, 0x12, 0x78, 0x02, 0x46, 0x18, 0x31, 0xa2, 0x34, 0x49, 0x11, 0x4f, 0x3e, 0x93, 0x55, 0x33,
	0x9d, 0xbf, 0x64, 0xed, 0xe1, 0x85, 0x91, 0x2e, 0x8d, 0x72, 0xfe, 0x64, 0xbb, 0x99, 0x3c, 0x1e,
	0x5a, 0xf0, 0x21, 0xd8, 0xa5, 0x4c, 0x1f, 0xcf, 0xe0, 0x4e, 0x59, 0xd2, 0xd4, 0x83, 0x0d, 0x94,
	0x90, 0xb4, 0xc0, 0xb2, 0x42, 0x5f, 0x48, 0xe5, 0xfb, 0x87, 0x60, 0xef, 0xfa, 0x24, 0x6a, 0x2f,
	0xe8, 0x81, 0xe1, 0x8a, 0x33, 0x4d, 0x98, 0x56, 0x4d, 0x47, 0xf1, 0xf5, 0xb7, 0xff, 0x06, 0x40,
	0xd3, 0x77, 0xb7, 0x33, 0x73, 0x6a, 0x30, 0x02, 0x03, 0x8c, 0x0c, 0xb6, 0x49, 0xa8, 0x77, 0xd0,
	0x21, 0xfe, 0x62, 0x1d, 0xf7, 0xf1, 0xbb, 0x5a, 0x35, 0x37, 0xd7, 0x36, 0xb4, 0x4e, 0x5f, 0x7c,
	0x3a, 0xfb, 0xd7, 0x77, 0x71, 0xd3, 0x4b, 0x3b, 0x69, 0x7f, 0x26, 0x7d, 0xa3, 0x3e, 0xfe, 0x1e,
	0x00, 0x00, 0xff, 0xff, 0xa3, 0xb7, 0x26, 0xf9, 0x90, 0x03, 0x00, 0x00,
}
